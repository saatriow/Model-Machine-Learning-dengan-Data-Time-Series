# -*- coding: utf-8 -*-
"""sat_timeseries.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1h_HD1V2AFcg-R2ZkS5C023e4o2e_eNj0

Nama : M. Priambodo Satrio Wibowo

Email : satriow110702@gmail.com

sumberdata: https://www.kaggle.com/datasets/emmanuelfwerr/london-weather-data
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
import tensorflow as tf
import matplotlib.pyplot as plt
from keras.layers import Dense, LSTM, Conv1D, Bidirectional

df = pd.read_csv('https://raw.githubusercontent.com/saatriow/Model-Machine-Learning-dengan-Data-Time-Series/main/london_weather.csv')
df.head

df = df.drop(columns=[
    'cloud_cover', 'sunshine', 'global_radiation', 'precipitation','pressure',
    'snow_depth'
])
df.head

df.isnull().sum()

df.dropna(subset=['max_temp'],inplace=True)
df.dropna(subset=['mean_temp'],inplace=True)
df.dropna(subset=['min_temp'],inplace=True)
df.isnull().sum()

df_plot = df
df_plot[df_plot.columns.to_list()].plot(subplots=True, figsize=(15, 9))
plt.show()

date = df['date'].values
suhu = df['mean_temp'].values

date = np.array(date)
suhu = np.array(suhu)

plt.figure(figsize=(15,9))
plt.plot(date, suhu)

plt.title('Temperatur Rata-Rata', fontsize = 22)
plt.ylabel('Suhu')
plt.xlabel('Tahun per-1980 - 2020')

df.dtypes

"""#### split data"""

x_train, x_valid, y_train, y_valid = train_test_split(suhu, date, test_size=0.2, shuffle=False)

print('Total Data Train : ', len(x_train))
print('Total Data Validation : ', len(x_valid))

def windowed_dataset(series, window_size, batch_size, shuffle_buffer):
  series = tf.expand_dims(series, axis=-1)
  ds = tf.data.Dataset.from_tensor_slices(series)
  ds = ds.window(window_size + 1, shift=1, drop_remainder=True)
  ds = ds.flat_map(lambda w : w.batch(window_size + 1))
  ds = ds.shuffle(shuffle_buffer)
  ds = ds.map(lambda w : (w[:-1], w[-1:]))
  return ds.batch(batch_size).prefetch(1)

train_set = windowed_dataset(
    x_train,
    window_size=60,
    batch_size=100,
    shuffle_buffer=1000
)

val_set = windowed_dataset(
    x_valid,
    window_size=60,
    batch_size=100,
    shuffle_buffer=1000
)

model = tf.keras.models.Sequential([
        Conv1D(filters=32, kernel_size=5, padding='causal', activation='relu', input_shape=[1, 1]),
        Bidirectional(LSTM(32, return_sequences=True)),
        Bidirectional(LSTM(32, return_sequences=True)),
        Dense(32, activation='relu'),
        Dense(16, activation='relu'),
        Dense(1)
])

Mae = (df['mean_temp'].max() - df['mean_temp'].min()) * 10/100
print(Mae)

class myCallback(tf.keras.callbacks.Callback):
  def on_epoch_end(self, epoch, logs={}):
    if(logs.get('mae') < Mae and logs.get('val_mae') < Mae):
      print("\nNilai MAE mencapai <10% skala data")
      self.model.stop_training=True

callbacks = myCallback()

optimizer = tf.keras.optimizers.SGD(learning_rate=1.0000e-04, momentum=0.9)

model.compile(
    loss=tf.keras.losses.Huber(),
    optimizer=optimizer,
    metrics=["mae"]
)

history = model.fit(
    train_set,
    epochs=100,
    validation_data=val_set,
    verbose=2,
    callbacks=[callbacks]
)

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])
plt.title('Loss Model')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

plt.plot(history.history['mae'])
plt.plot(history.history['val_mae'])
plt.title('Akurasi Model')
plt.ylabel('Accuracy')
plt.xlabel('Epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()